/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package loginserver.pocket;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-02")
public class ServerList implements org.apache.thrift.TBase<ServerList, ServerList._Fields>, java.io.Serializable, Cloneable, Comparable<ServerList> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServerList");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField SERVER_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("serverAmount", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField SERVER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("serverIp", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SERVER_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("serverPort", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField SERVER_AGE_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("serverAgeLimit", org.apache.thrift.protocol.TType.I16, (short)5);
  private static final org.apache.thrift.protocol.TField SERVER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("serverType", org.apache.thrift.protocol.TType.I16, (short)6);
  private static final org.apache.thrift.protocol.TField SERVER_ONLINE_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("serverOnlineLimit", org.apache.thrift.protocol.TType.I16, (short)7);
  private static final org.apache.thrift.protocol.TField SERVER_ONLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("serverOnline", org.apache.thrift.protocol.TType.I16, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ServerListStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ServerListTupleSchemeFactory());
  }

  public short id; // required
  public short serverAmount; // required
  public String serverIp; // required
  public short serverPort; // required
  public short serverAgeLimit; // required
  public short serverType; // required
  public short serverOnlineLimit; // required
  public short serverOnline; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    SERVER_AMOUNT((short)2, "serverAmount"),
    SERVER_IP((short)3, "serverIp"),
    SERVER_PORT((short)4, "serverPort"),
    SERVER_AGE_LIMIT((short)5, "serverAgeLimit"),
    SERVER_TYPE((short)6, "serverType"),
    SERVER_ONLINE_LIMIT((short)7, "serverOnlineLimit"),
    SERVER_ONLINE((short)8, "serverOnline");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // SERVER_AMOUNT
          return SERVER_AMOUNT;
        case 3: // SERVER_IP
          return SERVER_IP;
        case 4: // SERVER_PORT
          return SERVER_PORT;
        case 5: // SERVER_AGE_LIMIT
          return SERVER_AGE_LIMIT;
        case 6: // SERVER_TYPE
          return SERVER_TYPE;
        case 7: // SERVER_ONLINE_LIMIT
          return SERVER_ONLINE_LIMIT;
        case 8: // SERVER_ONLINE
          return SERVER_ONLINE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __SERVERAMOUNT_ISSET_ID = 1;
  private static final int __SERVERPORT_ISSET_ID = 2;
  private static final int __SERVERAGELIMIT_ISSET_ID = 3;
  private static final int __SERVERTYPE_ISSET_ID = 4;
  private static final int __SERVERONLINELIMIT_ISSET_ID = 5;
  private static final int __SERVERONLINE_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SERVER_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("serverAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SERVER_IP, new org.apache.thrift.meta_data.FieldMetaData("serverIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVER_PORT, new org.apache.thrift.meta_data.FieldMetaData("serverPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SERVER_AGE_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("serverAgeLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SERVER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("serverType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SERVER_ONLINE_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("serverOnlineLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SERVER_ONLINE, new org.apache.thrift.meta_data.FieldMetaData("serverOnline", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ServerList.class, metaDataMap);
  }

  public ServerList() {
  }

  public ServerList(
    short id,
    short serverAmount,
    String serverIp,
    short serverPort,
    short serverAgeLimit,
    short serverType,
    short serverOnlineLimit,
    short serverOnline)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.serverAmount = serverAmount;
    setServerAmountIsSet(true);
    this.serverIp = serverIp;
    this.serverPort = serverPort;
    setServerPortIsSet(true);
    this.serverAgeLimit = serverAgeLimit;
    setServerAgeLimitIsSet(true);
    this.serverType = serverType;
    setServerTypeIsSet(true);
    this.serverOnlineLimit = serverOnlineLimit;
    setServerOnlineLimitIsSet(true);
    this.serverOnline = serverOnline;
    setServerOnlineIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ServerList(ServerList other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.serverAmount = other.serverAmount;
    if (other.isSetServerIp()) {
      this.serverIp = other.serverIp;
    }
    this.serverPort = other.serverPort;
    this.serverAgeLimit = other.serverAgeLimit;
    this.serverType = other.serverType;
    this.serverOnlineLimit = other.serverOnlineLimit;
    this.serverOnline = other.serverOnline;
  }

  public ServerList deepCopy() {
    return new ServerList(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setServerAmountIsSet(false);
    this.serverAmount = 0;
    this.serverIp = null;
    setServerPortIsSet(false);
    this.serverPort = 0;
    setServerAgeLimitIsSet(false);
    this.serverAgeLimit = 0;
    setServerTypeIsSet(false);
    this.serverType = 0;
    setServerOnlineLimitIsSet(false);
    this.serverOnlineLimit = 0;
    setServerOnlineIsSet(false);
    this.serverOnline = 0;
  }

  public short getId() {
    return this.id;
  }

  public ServerList setId(short id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public short getServerAmount() {
    return this.serverAmount;
  }

  public ServerList setServerAmount(short serverAmount) {
    this.serverAmount = serverAmount;
    setServerAmountIsSet(true);
    return this;
  }

  public void unsetServerAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERAMOUNT_ISSET_ID);
  }

  /** Returns true if field serverAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetServerAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __SERVERAMOUNT_ISSET_ID);
  }

  public void setServerAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERAMOUNT_ISSET_ID, value);
  }

  public String getServerIp() {
    return this.serverIp;
  }

  public ServerList setServerIp(String serverIp) {
    this.serverIp = serverIp;
    return this;
  }

  public void unsetServerIp() {
    this.serverIp = null;
  }

  /** Returns true if field serverIp is set (has been assigned a value) and false otherwise */
  public boolean isSetServerIp() {
    return this.serverIp != null;
  }

  public void setServerIpIsSet(boolean value) {
    if (!value) {
      this.serverIp = null;
    }
  }

  public short getServerPort() {
    return this.serverPort;
  }

  public ServerList setServerPort(short serverPort) {
    this.serverPort = serverPort;
    setServerPortIsSet(true);
    return this;
  }

  public void unsetServerPort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERPORT_ISSET_ID);
  }

  /** Returns true if field serverPort is set (has been assigned a value) and false otherwise */
  public boolean isSetServerPort() {
    return EncodingUtils.testBit(__isset_bitfield, __SERVERPORT_ISSET_ID);
  }

  public void setServerPortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERPORT_ISSET_ID, value);
  }

  public short getServerAgeLimit() {
    return this.serverAgeLimit;
  }

  public ServerList setServerAgeLimit(short serverAgeLimit) {
    this.serverAgeLimit = serverAgeLimit;
    setServerAgeLimitIsSet(true);
    return this;
  }

  public void unsetServerAgeLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERAGELIMIT_ISSET_ID);
  }

  /** Returns true if field serverAgeLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetServerAgeLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __SERVERAGELIMIT_ISSET_ID);
  }

  public void setServerAgeLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERAGELIMIT_ISSET_ID, value);
  }

  public short getServerType() {
    return this.serverType;
  }

  public ServerList setServerType(short serverType) {
    this.serverType = serverType;
    setServerTypeIsSet(true);
    return this;
  }

  public void unsetServerType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERTYPE_ISSET_ID);
  }

  /** Returns true if field serverType is set (has been assigned a value) and false otherwise */
  public boolean isSetServerType() {
    return EncodingUtils.testBit(__isset_bitfield, __SERVERTYPE_ISSET_ID);
  }

  public void setServerTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERTYPE_ISSET_ID, value);
  }

  public short getServerOnlineLimit() {
    return this.serverOnlineLimit;
  }

  public ServerList setServerOnlineLimit(short serverOnlineLimit) {
    this.serverOnlineLimit = serverOnlineLimit;
    setServerOnlineLimitIsSet(true);
    return this;
  }

  public void unsetServerOnlineLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERONLINELIMIT_ISSET_ID);
  }

  /** Returns true if field serverOnlineLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetServerOnlineLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __SERVERONLINELIMIT_ISSET_ID);
  }

  public void setServerOnlineLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERONLINELIMIT_ISSET_ID, value);
  }

  public short getServerOnline() {
    return this.serverOnline;
  }

  public ServerList setServerOnline(short serverOnline) {
    this.serverOnline = serverOnline;
    setServerOnlineIsSet(true);
    return this;
  }

  public void unsetServerOnline() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERONLINE_ISSET_ID);
  }

  /** Returns true if field serverOnline is set (has been assigned a value) and false otherwise */
  public boolean isSetServerOnline() {
    return EncodingUtils.testBit(__isset_bitfield, __SERVERONLINE_ISSET_ID);
  }

  public void setServerOnlineIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERONLINE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Short)value);
      }
      break;

    case SERVER_AMOUNT:
      if (value == null) {
        unsetServerAmount();
      } else {
        setServerAmount((Short)value);
      }
      break;

    case SERVER_IP:
      if (value == null) {
        unsetServerIp();
      } else {
        setServerIp((String)value);
      }
      break;

    case SERVER_PORT:
      if (value == null) {
        unsetServerPort();
      } else {
        setServerPort((Short)value);
      }
      break;

    case SERVER_AGE_LIMIT:
      if (value == null) {
        unsetServerAgeLimit();
      } else {
        setServerAgeLimit((Short)value);
      }
      break;

    case SERVER_TYPE:
      if (value == null) {
        unsetServerType();
      } else {
        setServerType((Short)value);
      }
      break;

    case SERVER_ONLINE_LIMIT:
      if (value == null) {
        unsetServerOnlineLimit();
      } else {
        setServerOnlineLimit((Short)value);
      }
      break;

    case SERVER_ONLINE:
      if (value == null) {
        unsetServerOnline();
      } else {
        setServerOnline((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case SERVER_AMOUNT:
      return getServerAmount();

    case SERVER_IP:
      return getServerIp();

    case SERVER_PORT:
      return getServerPort();

    case SERVER_AGE_LIMIT:
      return getServerAgeLimit();

    case SERVER_TYPE:
      return getServerType();

    case SERVER_ONLINE_LIMIT:
      return getServerOnlineLimit();

    case SERVER_ONLINE:
      return getServerOnline();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case SERVER_AMOUNT:
      return isSetServerAmount();
    case SERVER_IP:
      return isSetServerIp();
    case SERVER_PORT:
      return isSetServerPort();
    case SERVER_AGE_LIMIT:
      return isSetServerAgeLimit();
    case SERVER_TYPE:
      return isSetServerType();
    case SERVER_ONLINE_LIMIT:
      return isSetServerOnlineLimit();
    case SERVER_ONLINE:
      return isSetServerOnline();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ServerList)
      return this.equals((ServerList)that);
    return false;
  }

  public boolean equals(ServerList that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_serverAmount = true;
    boolean that_present_serverAmount = true;
    if (this_present_serverAmount || that_present_serverAmount) {
      if (!(this_present_serverAmount && that_present_serverAmount))
        return false;
      if (this.serverAmount != that.serverAmount)
        return false;
    }

    boolean this_present_serverIp = true && this.isSetServerIp();
    boolean that_present_serverIp = true && that.isSetServerIp();
    if (this_present_serverIp || that_present_serverIp) {
      if (!(this_present_serverIp && that_present_serverIp))
        return false;
      if (!this.serverIp.equals(that.serverIp))
        return false;
    }

    boolean this_present_serverPort = true;
    boolean that_present_serverPort = true;
    if (this_present_serverPort || that_present_serverPort) {
      if (!(this_present_serverPort && that_present_serverPort))
        return false;
      if (this.serverPort != that.serverPort)
        return false;
    }

    boolean this_present_serverAgeLimit = true;
    boolean that_present_serverAgeLimit = true;
    if (this_present_serverAgeLimit || that_present_serverAgeLimit) {
      if (!(this_present_serverAgeLimit && that_present_serverAgeLimit))
        return false;
      if (this.serverAgeLimit != that.serverAgeLimit)
        return false;
    }

    boolean this_present_serverType = true;
    boolean that_present_serverType = true;
    if (this_present_serverType || that_present_serverType) {
      if (!(this_present_serverType && that_present_serverType))
        return false;
      if (this.serverType != that.serverType)
        return false;
    }

    boolean this_present_serverOnlineLimit = true;
    boolean that_present_serverOnlineLimit = true;
    if (this_present_serverOnlineLimit || that_present_serverOnlineLimit) {
      if (!(this_present_serverOnlineLimit && that_present_serverOnlineLimit))
        return false;
      if (this.serverOnlineLimit != that.serverOnlineLimit)
        return false;
    }

    boolean this_present_serverOnline = true;
    boolean that_present_serverOnline = true;
    if (this_present_serverOnline || that_present_serverOnline) {
      if (!(this_present_serverOnline && that_present_serverOnline))
        return false;
      if (this.serverOnline != that.serverOnline)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_serverAmount = true;
    list.add(present_serverAmount);
    if (present_serverAmount)
      list.add(serverAmount);

    boolean present_serverIp = true && (isSetServerIp());
    list.add(present_serverIp);
    if (present_serverIp)
      list.add(serverIp);

    boolean present_serverPort = true;
    list.add(present_serverPort);
    if (present_serverPort)
      list.add(serverPort);

    boolean present_serverAgeLimit = true;
    list.add(present_serverAgeLimit);
    if (present_serverAgeLimit)
      list.add(serverAgeLimit);

    boolean present_serverType = true;
    list.add(present_serverType);
    if (present_serverType)
      list.add(serverType);

    boolean present_serverOnlineLimit = true;
    list.add(present_serverOnlineLimit);
    if (present_serverOnlineLimit)
      list.add(serverOnlineLimit);

    boolean present_serverOnline = true;
    list.add(present_serverOnline);
    if (present_serverOnline)
      list.add(serverOnline);

    return list.hashCode();
  }

  @Override
  public int compareTo(ServerList other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerAmount()).compareTo(other.isSetServerAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverAmount, other.serverAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerIp()).compareTo(other.isSetServerIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverIp, other.serverIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerPort()).compareTo(other.isSetServerPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverPort, other.serverPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerAgeLimit()).compareTo(other.isSetServerAgeLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerAgeLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverAgeLimit, other.serverAgeLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerType()).compareTo(other.isSetServerType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverType, other.serverType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerOnlineLimit()).compareTo(other.isSetServerOnlineLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerOnlineLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverOnlineLimit, other.serverOnlineLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerOnline()).compareTo(other.isSetServerOnline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerOnline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverOnline, other.serverOnline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ServerList(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverAmount:");
    sb.append(this.serverAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverIp:");
    if (this.serverIp == null) {
      sb.append("null");
    } else {
      sb.append(this.serverIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverPort:");
    sb.append(this.serverPort);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverAgeLimit:");
    sb.append(this.serverAgeLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverType:");
    sb.append(this.serverType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverOnlineLimit:");
    sb.append(this.serverOnlineLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverOnline:");
    sb.append(this.serverOnline);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ServerListStandardSchemeFactory implements SchemeFactory {
    public ServerListStandardScheme getScheme() {
      return new ServerListStandardScheme();
    }
  }

  private static class ServerListStandardScheme extends StandardScheme<ServerList> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ServerList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.id = iprot.readI16();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVER_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.serverAmount = iprot.readI16();
              struct.setServerAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SERVER_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverIp = iprot.readString();
              struct.setServerIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SERVER_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.serverPort = iprot.readI16();
              struct.setServerPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SERVER_AGE_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.serverAgeLimit = iprot.readI16();
              struct.setServerAgeLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SERVER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.serverType = iprot.readI16();
              struct.setServerTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SERVER_ONLINE_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.serverOnlineLimit = iprot.readI16();
              struct.setServerOnlineLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SERVER_ONLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.serverOnline = iprot.readI16();
              struct.setServerOnlineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ServerList struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI16(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SERVER_AMOUNT_FIELD_DESC);
      oprot.writeI16(struct.serverAmount);
      oprot.writeFieldEnd();
      if (struct.serverIp != null) {
        oprot.writeFieldBegin(SERVER_IP_FIELD_DESC);
        oprot.writeString(struct.serverIp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SERVER_PORT_FIELD_DESC);
      oprot.writeI16(struct.serverPort);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SERVER_AGE_LIMIT_FIELD_DESC);
      oprot.writeI16(struct.serverAgeLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SERVER_TYPE_FIELD_DESC);
      oprot.writeI16(struct.serverType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SERVER_ONLINE_LIMIT_FIELD_DESC);
      oprot.writeI16(struct.serverOnlineLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SERVER_ONLINE_FIELD_DESC);
      oprot.writeI16(struct.serverOnline);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ServerListTupleSchemeFactory implements SchemeFactory {
    public ServerListTupleScheme getScheme() {
      return new ServerListTupleScheme();
    }
  }

  private static class ServerListTupleScheme extends TupleScheme<ServerList> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ServerList struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetServerAmount()) {
        optionals.set(1);
      }
      if (struct.isSetServerIp()) {
        optionals.set(2);
      }
      if (struct.isSetServerPort()) {
        optionals.set(3);
      }
      if (struct.isSetServerAgeLimit()) {
        optionals.set(4);
      }
      if (struct.isSetServerType()) {
        optionals.set(5);
      }
      if (struct.isSetServerOnlineLimit()) {
        optionals.set(6);
      }
      if (struct.isSetServerOnline()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetId()) {
        oprot.writeI16(struct.id);
      }
      if (struct.isSetServerAmount()) {
        oprot.writeI16(struct.serverAmount);
      }
      if (struct.isSetServerIp()) {
        oprot.writeString(struct.serverIp);
      }
      if (struct.isSetServerPort()) {
        oprot.writeI16(struct.serverPort);
      }
      if (struct.isSetServerAgeLimit()) {
        oprot.writeI16(struct.serverAgeLimit);
      }
      if (struct.isSetServerType()) {
        oprot.writeI16(struct.serverType);
      }
      if (struct.isSetServerOnlineLimit()) {
        oprot.writeI16(struct.serverOnlineLimit);
      }
      if (struct.isSetServerOnline()) {
        oprot.writeI16(struct.serverOnline);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ServerList struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.id = iprot.readI16();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.serverAmount = iprot.readI16();
        struct.setServerAmountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.serverIp = iprot.readString();
        struct.setServerIpIsSet(true);
      }
      if (incoming.get(3)) {
        struct.serverPort = iprot.readI16();
        struct.setServerPortIsSet(true);
      }
      if (incoming.get(4)) {
        struct.serverAgeLimit = iprot.readI16();
        struct.setServerAgeLimitIsSet(true);
      }
      if (incoming.get(5)) {
        struct.serverType = iprot.readI16();
        struct.setServerTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.serverOnlineLimit = iprot.readI16();
        struct.setServerOnlineLimitIsSet(true);
      }
      if (incoming.get(7)) {
        struct.serverOnline = iprot.readI16();
        struct.setServerOnlineIsSet(true);
      }
    }
  }

}

